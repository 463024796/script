#!/bin/sh
encrytedpasswd() {
  export PASSWD=$(echo "$PASSWD" | base64 -i)
}

unencrytedpasswd() {
  export PASSWD=$(echo "$PASSWD" | base64 -d)
}

if [ -f "$PWD/envsetup.sh" ]; then
  . $PWD/envsetup.sh
else
  exit 1
fi

if [ ! -d "$WORKDIRECTORY/pid" ]; then
  mkdir -v $WORKDIRECTORY/pid
fi

if [ ! -d "$WORKDIRECTORY/config" ]; then
  mkdir -v $WORKDIRECTORY/config
fi

#TCP fast open check
if [ -f "/proc/sys/net/ipv4/tcp_fastopen" ]; then
  FASTOPEN_CHECK=$(cat /proc/sys/net/ipv4/tcp_fastopen)
  if [ "$FASTOPEN_CHECK" = "3" ]; then
    FASTOPEN=--fast-open
  else
    FASTOPEN=
  fi
else
  if [ $LANG=zh_CN.UTF-8 ]; then
    echo "不支持TCP FASTOPEN"
  else
    echo "Not support TCP FASTOPEN"
  fi
fi

read -p "Encryption(default:chacha20-ietf-poly1305): " ENCRYPTION

if [ -z $ENCRYPTION ]; then
  ENCRYPTION=chacha20-ietf-poly1305
fi

read -p "Run User(default:nobody): " RUN_USER

if [ -z $RUN_USER ]; then
  RUN_USER=nobody
fi

read -p "Enable udprelay mode(default:yes):(yes/no) " UDP

if [ "$UDP" = "yes" ] || [ "$UDP" = "" ]; then
  UDP=-u
elif [ "$UDP" = "no" ]; then
  UDP=
fi

read -p "Enable TCP_NODELAY(default:yes):(yes/no) " TCP_NODELAY

if [ "$TCP_NODELAY" = "yes" ] || [ "$TCP_NODELAY" = "" ]; then
  TCP_NODELAY=--no-delay
elif [ "$TCP_NODELAY" = "no" ]; then
  TCP_NODELAY=
fi

read -p "Enable port reuse(default:yes):(yes/no) " PORT_REUSE

if [ "$PORT_REUSE" = "yes" ] || [ "$PORT_REUSE" = "" ]; then
  PORT_REUSE=--reuse-port
elif [ "$PORT_REUSE" = "no" ]; then
  PORT_REUSE=
fi

read -p "Enable SIP003 plugin. (Experimental)(default:yes):(yes/no) " PLUGIN_CHECK

if [ "$PLUGIN_CHECK" = "yes" ] || [ "$PLUGIN_CHECK" = "" ]; then
  if [ "$KCPTUN_INSTALL" = "no" && "$V2RAY_PLUGIN_INSTALL" = "no" ]; then
    read -p "Select plugin: (1.simple-obfs )(default:simple-obfs) " PLUGIN
  elif [ "$KCPTUN_INSTALL" = "yes" && "$V2RAY_PLUGIN_INSTALL" = "no" ]; then
    read -p "Select plugin: (1.simple-obfs 2.kcptun )(default:simple-obfs) " PLUGIN
  elif [ "$V2RAY_PLUGIN_INSTALL" = "yes" && "$KCPTUN_INSTALL" = "no" ]; then
    read -p "Select plugin: (1.simple-obfs 3.v2ray_plugin )(default:simple-obfs) " PLUGIN
  elif [ "$V2RAY_PLUGIN_INSTALL" = "yes" && "$KCPTUN_INSTALL" = "yes" ]; then
    read -p "Select plugin: (1.simple-obfs 2.kcptun 3.v2ray_plugin )(default:simple-obfs) " PLUGIN
  fi

  case "$PLUGIN" in
    1 | simple-obfs | "")
      PLUGIN=obfs-serve
      obfs_plugin_options_check() {
        read -p "Set SIP003 plugin options. (Experimental)(default:tls):(tls/http) " PLUGIN_OPTIONS
      }
      obfs_plugin_options_check
      if [ "$PLUGIN_OPTIONS" = "tls" ] || [ "$PLUGIN_OPTIONS" = "" ]; then
        PLUGIN_OPTIONS="obfs=tls"
      elif [ "$PLUGIN_OPTIONS" = "http" ]; then
        PLUGIN_OPTIONS="obfs=http"
      else
        if [ $LANG=zh_CN.UTF-8 ]; then
          echo "参数无效"
        else
          echo "Invalid parameters"
        fi
        obfs_plugin_options_check
      fi
      fi
    2 | kcptun)
      read -p "Set SIP003 plugin options. (Experimental) "
    3 | v2ray_plugin)
      PLUGIN=v2ray-plugin
      v2ray_plugin_options_check() {
        read -p "Set SIP003 plugin options. (Experimental)(default:quic):(websocket/quic) " PLUGIN_OPTIONS
      }
      v2ray_plugin_options_check
      if [ "$PLUGIN_OPTIONS" = "quic" ] || [ "$PLUGIN_OPTIONS" = "" ]; then
        PLUGIN_OPTIONS="server;mode=quic"
      elif [ "$PLUGIN_OPTIONS" = "websocket" ]; then
        PLUGIN_OPTIONS="server"
      else
        if [ $LANG=zh_CN.UTF-8 ]; then
          echo "参数无效"
        else
          echo "Invalid parameters"
        fi
        v2ray_plugin_options_check
      fi
      fi
      ;;
  esac
elif [ "$PLUGIN_CHECK" = "no" ]; then
  PLUGIN_CHECK=no
fi

port_check() {
  read -p "port: " PORT

  if [ "$PORT" = "" ]; then
    port_check
  else
    if [ "$SUDO" = "yes" ]; then
      $UNENCRYTEDPASSWD
      PORT_USE_CHECK=$(echo $PASSWD | sudo -SE sh -c "lsof -i:$PORT")
      $ENCRYTEDPASSWD
    elif [ "$SUDO" = "no" ]; then
      PORT_USE_CHECK=$(lsof -i:$PORT)
    fi
    if [ "$PORT_USE_CHECK" != "" ] || [ "$PORT" = "" ]; then
      port_check
    else
      if [ -f "$WORKDIRECTORY/config/ss_run1" ]; then
        PORT_EXIST=$(grep -rwo "\-p $PORT" $WORKDIRECTORY/config)
        PID_NUM=$(grep -ro 'ss-server' $WORKDIRECTORY/config | wc -l)
        PID_NUM=$(expr $PID_NUM + 1)
      else
        PORT_EXIST=""
        PID_NUM=1
        FIRST_RUN=yes
      fi
      if [ "$PORT_EXIST" != "" ]; then
        port_check
      else
        if [ "$PORT" -lt 8300 ] || [ "$PORT" -gt 8400 ]; then
          read -p "passwd: " PASSWORD

          IPV6=$(curl -I -s --connect-timeout 5 ipv6.google.com -w %{http_code} | tail -n1)
          if [ "$PLUGIN_CHECK" = "yes" ] || [ "$PLUGIN_CHECK" = "" ]; then
            if [ "$IPV6" = "200" ]; then
              echo "#!""/bin/sh" >>$WORKDIRECTORY/config/ss_run$PID_NUM
              echo "ss-server -s 0.0.0.0 -s :: -p $PORT -k $PASSWORD -m $ENCRYPTION -a $RUN_USER $UDP -6 $TCP_NODELAY $FASTOPEN $PORT_REUSE --plugin $PLUGIN --plugin-opts "$PLUGIN_OPTIONS" -f $WORKDIRECTORY/pid/shadowsocks-$PID_NUM.pid" >>$WORKDIRECTORY/config/ss_run$PID_NUM
            else
              echo "#!""/bin/sh" >>$WORKDIRECTORY/config/ss_run$PID_NUM
              echo "ss-server -s 0.0.0.0 -p $PORT -k $PASSWORD -m $ENCRYPTION -a $RUN_USER $UDP $TCP_NODELAY $FASTOPEN $PORT_REUSE --plugin $PLUGIN --plugin-opts "$PLUGIN_OPTIONS" -f $WORKDIRECTORY/pid/shadowsocks-$PID_NUM.pid" >>$WORKDIRECTORY/config/ss_run$PID_NUM
            fi
          elif [ "$PLUGIN_CHECK" = "no" ]; then
            if [ "$IPV6" = "200" ]; then
              echo "#!""/bin/sh" >>$WORKDIRECTORY/config/ss_run$PID_NUM
              echo "ss-server -s 0.0.0.0 -s :: -p $PORT -k $PASSWORD -m $ENCRYPTION -a $RUN_USER $UDP -6 $TCP_NODELAY $FASTOPEN $PORT_REUSE -f $WORKDIRECTORY/pid/shadowsocks-$PID_NUM.pid" >>$WORKDIRECTORY/config/ss_run$PID_NUM
            else
              echo "#!""/bin/sh" >>$WORKDIRECTORY/config/ss_run$PID_NUM
              echo "ss-server -s 0.0.0.0 -p $PORT[$ELEMENTS_NUMBER] -k $PASSWORD -m $ENCRYPTION -a $RUN_USER $UDP $TCP_NODELAY $FASTOPEN $PORT_REUSE -f $WORKDIRECTORY/pid/shadowsocks-$PID_NUM.pid" >>$WORKDIRECTORY/config/ss_run$PID_NUM
            fi
          fi
        elif [ $LANG=zh_CN.UTF-8 ]; then
          echo "请使用小于8300或大于8400的端口"
          port_check
        else
          echo "Please use a port smaller than 8300 or larger than 8400"
          port_check
        fi
      fi
    fi
  fi

  if [ "$OS" = "redhat7" ]; then
    if [ "$SUDO" = "yes" ]; then
      $UNENCRYTEDPASSWD
      echo $PASSWD | sudo -SE firewall-cmd --permanent --zone=public --add-port=$PORT/udp
      echo $PASSWD | sudo -SE firewall-cmd --permanent --zone=public --add-port=$PORT/tcp
      echo $PASSWD | sudo -SE firewall-cmd --reload
      $ENCRYTEDPASSWD
    elif [ "$SUDO" = "no" ] || [ "$SUDO" = "" ]; then
      firewall-cmd --permanent --zone=public --add-port=$PORT/udp
      firewall-cmd --permanent --zone=public --add-port=$PORT/tcp
      firewall-cmd --reload
    fi
  elif [ "$OS" = "redhat6" ]; then
    if [ "$SUDO" = "yes" ]; then
      $UNENCRYTEDPASSWD
      echo $PASSWD | sudo -SE iptables -I INPUT -p tcp --dport $PORT -j ACCEPT
      echo $PASSWD | sudo -SE iptables -I INPUT -p udp --dport $PORT -j ACCEPT
      echo $PASSWD | sudo -SE service iptables save
      $ENCRYTEDPASSWD
    elif [ "$SUDO" = "no" ] || [ "$SUDO" = "" ]; then
      iptables -I INPUT -p tcp --dport $PORT -j ACCEPT
      iptables -I INPUT -p udp --dport $PORT -j ACCEPT
      service iptables save
    fi
  fi
}

port_check

if [ "$LANG" = "zh_CN.UTF-8" ]; then
  read -p "是否运行Shadowsocks服务器?(yes/no) (默认:yes)" RUN_SERVER
else
  read -p "Running shadowsocks server?(yes/no) (default:yes)" RUN_SERVER
fi

if [ "$FIRST_RUN" = "yes" ]; then
  ln -v $DEP/run $WORKDIRECTORY/bin
fi
if [ "$RUN_SERVER" = "yes" ] || [ "$RUN_SERVER" = "" ]; then
  . $WORKDIRECTORY/bin/run
fi

unset ENCRYPTION
unset PLUGIN_CHECK
unset PORT
unset PASSWD
unset PASSWORD
unset FASTOPEN
unset UDP
unset REMOTE_DNS
unset TCP_NODELAY
unset PLUGIN
unset PLUGIN_OPTIONS
unset FASTOPEN_CHECK
unset PORT_EXIST
unset PORT_USE_CHECK
unset RUN_SERVER
